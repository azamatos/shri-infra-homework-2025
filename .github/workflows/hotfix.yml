name: Create Hotfix

on:
  workflow_dispatch:
    inputs:
      release_version:
        description: 'Release version to fix (e.g., 1.0.0, 1.1.0, 2.0.0)'
        required: true
        type: string
      confirm:
        description: 'Type "yes" to confirm hotfix creation'
        required: true
        default: 'no'

jobs:
  # Job 1: Run tests and type checking
  test:
    runs-on: ubuntu-latest
    if: github.event.inputs.confirm == 'yes'
    
    steps:
    - name: Checkout release branch
      uses: actions/checkout@v4
      with:
        ref: releases/${{ github.event.inputs.release_version }}
        
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run linter
      run: npm run lint
      
    - name: Run tests
      run: npm run test

  # Job 2: Create hotfix and build Docker image
  hotfix:
    runs-on: ubuntu-latest
    needs: test
    outputs:
      fix_version: ${{ steps.version.outputs.fix_version }}
      commits_list: ${{ steps.commits.outputs.commits }}
      issue_number: ${{ steps.find_issue.outputs.issue_number }}
      
    steps:
    - name: Checkout release branch
      uses: actions/checkout@v4
      with:
        ref: releases/${{ github.event.inputs.release_version }}
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Set fix version
      id: version
      run: echo "fix_version=${{ github.event.inputs.release_version }}_fix${{ github.run_number }}" >> $GITHUB_OUTPUT
      
    - name: Find release issue
      id: find_issue
      uses: actions/github-script@v7
      with:
        script: |
          const issues = await github.rest.issues.listForRepo({
            owner: context.repo.owner,
            repo: context.repo.repo,
            labels: 'release',
            state: 'open'
          });
          
          const releaseIssue = issues.data.find(issue => 
            issue.title.includes(`Release ${{ github.event.inputs.release_version }}`)
          );
          
          if (releaseIssue) {
            console.log('Found release issue:', releaseIssue.number);
            core.setOutput('issue_number', releaseIssue.number);
            return releaseIssue.number;
          } else {
            console.log('Release issue not found, will skip commenting');
            core.setOutput('issue_number', '0');
            return 0;
          }
        
    - name: Get commits since last fix/release
      id: commits
      run: |
        LAST_TAG=$(git tag -l "${{ github.event.inputs.release_version }}*" --sort=-version:refname | head -n 1)
        if [ -z "$LAST_TAG" ]; then
          LAST_TAG="${{ github.event.inputs.release_version }}"
        fi
        COMMITS=$(git log --pretty=format:"- %s (%h)" ${LAST_TAG}..HEAD)
        echo "commits<<EOF" >> $GITHUB_OUTPUT
        echo "$COMMITS" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT
        
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Login to Yandex Cloud Container Registry
      uses: docker/login-action@v3
      with:
        registry: cr.yandex
        username: json_key
        password: ${{ secrets.YC_SA_JSON_CREDENTIALS }}
        
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: |
          cr.yandex/${{ secrets.YC_REGISTRY_ID }}/app:${{ steps.version.outputs.fix_version }}
          cr.yandex/${{ secrets.YC_REGISTRY_ID }}/app:${{ github.event.inputs.release_version }}_latest
          
    - name: Create git tag
      run: |
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"
        git tag ${{ steps.version.outputs.fix_version }}
        git push origin ${{ steps.version.outputs.fix_version }}

  # Job 3: Comment on release issue
  comment_issue:
    runs-on: ubuntu-latest
    needs: hotfix
    if: needs.hotfix.outputs.issue_number != '0'
    
    steps:
    - name: Comment on release issue
      uses: actions/github-script@v7
      env:
        REGISTRY_ID: ${{ secrets.YC_REGISTRY_ID }}
        FIX_VERSION: ${{ needs.hotfix.outputs.fix_version }}
        COMMITS_LIST: ${{ needs.hotfix.outputs.commits_list }}
        ISSUE_NUMBER: ${{ needs.hotfix.outputs.issue_number }}
      with:
        script: |
          const registryId = process.env.REGISTRY_ID;
          const fixVersion = process.env.FIX_VERSION;
          const commitsList = process.env.COMMITS_LIST;
          const issueNumber = parseInt(process.env.ISSUE_NUMBER);
          
          if (issueNumber === 0) {
            console.log('No release issue found, skipping comment');
            return;
          }
          
          const commentBody = `## Hotfix Applied ðŸ”§
          
          **Fix Date**: ${new Date().toISOString().split('T')[0]}
          **Fix Author**: @${{ github.actor }}
          **Fix Version**: ${fixVersion}
          
          ## Docker Image
          \`cr.yandex/${registryId}/app:${fixVersion}\`
          
          ## Changes in this Hotfix
          ${commitsList}
          
          ## Status
          - Hotfix Docker image built and pushed
          - Git tag created (\`${fixVersion}\`)
          - Latest tag updated
          - Ready for deployment
          
          ---
          *This comment was automatically created by the hotfix workflow.*`;
          
          await github.rest.issues.createComment({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: issueNumber,
            body: commentBody
          });
          
          console.log(`Comment added to issue #${issueNumber}`); 