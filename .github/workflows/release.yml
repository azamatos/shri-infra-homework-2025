name: Create Release

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., 1.0.0, 1.1.0, 2.0.0)'
        required: true
        type: string
      confirm:
        description: 'Type "yes" to confirm release creation'
        required: true
        default: 'no'

jobs:
  # Job 1: Run tests and linting
  test:
    runs-on: ubuntu-latest
    if: github.event.inputs.confirm == 'yes'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run linter
      run: npm run lint
      
    - name: Run tests
      run: npm run test

  # Job 2: Create release branch and build Docker image
  release:
    runs-on: ubuntu-latest
    needs: test
    outputs:
      release_version: ${{ steps.version.outputs.version }}
      commits_list: ${{ steps.commits.outputs.commits }}
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Set release version
      id: version
      run: echo "version=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
      
    - name: Create release branch
      run: |
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"
        git checkout -b releases/${{ steps.version.outputs.version }}
        git push origin releases/${{ steps.version.outputs.version }}
        
    - name: Get commits since last release
      id: commits
      run: |
        LAST_TAG=$(git tag -l "*.*.*" --sort=-version:refname | head -n 1)
        if [ -z "$LAST_TAG" ]; then
          LAST_TAG=$(git rev-list --max-parents=0 HEAD)
        fi
        COMMITS=$(git log --pretty=format:"- %s (%h)" ${LAST_TAG}..HEAD)
        echo "commits<<EOF" >> $GITHUB_OUTPUT
        echo "$COMMITS" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT
        
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Login to Yandex Cloud Container Registry
      uses: docker/login-action@v3
      with:
        registry: cr.yandex
        username: json_key
        password: ${{ secrets.YC_SA_JSON_CREDENTIALS }}
        
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: |
          cr.yandex/crp18f0881clcu82u2d8/app:${{ steps.version.outputs.version }}
          cr.yandex/crp18f0881clcu82u2d8/app:${{ steps.version.outputs.version }}_latest
          
    - name: Create git tag
      run: |
        git tag ${{ steps.version.outputs.version }}
        git push origin ${{ steps.version.outputs.version }}
        
    - name: Update CHANGELOG.md
      run: |
        TODAY=$(date '+%Y-%m-%d')
        TEMP_FILE=$(mktemp)
        echo "# Version ${{ steps.version.outputs.version }} - $TODAY" > $TEMP_FILE
        echo "" >> $TEMP_FILE
        echo "${{ steps.commits.outputs.commits }}" >> $TEMP_FILE
        echo "" >> $TEMP_FILE
        if [ -f CHANGELOG.md ]; then
          cat CHANGELOG.md >> $TEMP_FILE
        fi
        mv $TEMP_FILE CHANGELOG.md
        git add CHANGELOG.md
        git commit -m "Update CHANGELOG for version ${{ steps.version.outputs.version }}"
        git push origin releases/${{ steps.version.outputs.version }}

  # Job 3: Create GitHub Issue
  create_issue:
    runs-on: ubuntu-latest
    needs: release
    
    steps:
    - name: Create release issue
      uses: actions/github-script@v7
      with:
        script: |
          const issueBody = `## Release Information
          
          **Date**: ${new Date().toISOString().split('T')[0]}
          **Author**: @${{ github.actor }}
          **Version**: ${{ needs.release.outputs.release_version }}
          **Release Branch**: \`releases/${{ needs.release.outputs.release_version }}\`
          
          ## Docker Image
          \`cr.yandex/crp18f0881clcu82u2d8/app:${{ needs.release.outputs.release_version }}\`
          
          ## Changes in this Release
          ${{ needs.release.outputs.commits_list }}
          
          ## Status
          - Release branch created
          - Docker image built and pushed  
          - Git tag created
          - CHANGELOG updated
          - Awaiting deployment
          
          ---
          *This issue was automatically created by the release workflow.*`;
          
          const { data: issue } = await github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: `Release ${{ needs.release.outputs.release_version }}`,
            body: issueBody,
            labels: ['release']
          });
          
          console.log('Created issue:', issue.number); 